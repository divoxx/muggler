#!/bin/bash
set -e

function usage {
	cat <<EOF
Usage: $(basename $(this_script)) install
       $(basename $(this_script)) sync [ <rev_from> <rev_to> ]

Commands

  install   Install muggler into the current repository, setting up all git hooks
  sync      Synchronize migrations between to rev, git hooks perform this call
  hold 		Hold auto-migrations until continue is called
  continue  Perform migration from when hold was called to the current commit
  store_rev Stores the current rev as last migrated revision
EOF
}

function prefix {
	local bin="${BASH_SOURCE[0]}"
	local lnk="$(readlink "${bin}")"

	echo $(cd "$(dirname "${bin}")" && cd "$(dirname "${lnk}")/.." && pwd)
}

function this_script {
	echo "$(prefix)/bin/muggler"
}

function detect-ruby {
	if which rbenv > /dev/null; then
	  ruby=$(rbenv which ruby)
	elif which rvm > /dev/null; then
	  source $(rvm env --path)
	  ruby=$(which ruby)
	else
	  ruby=$(which ruby)
	fi

	if [[ -z $ruby ]]; then
	  exit 1
	else
	  echo $ruby
	fi
}

function repo_dir {
	git rev-parse --show-toplevel
}

function muggler_dir {
	echo "$(repo_dir)/.muggler"
}

function repo_id {
	local id=$(git config remote.origin.url || repo_dir)
	echo -n "${id}" | md5
}

function rev_name {
	git name-rev --name-only "${1}"
}

function rev_migrations {
	git ls-tree "${1}" -- db/migrate/ | cut -f 2 | sed 's/db\/migrate\///'
}

function rev_mig_diff {
	local src="${1}"
	local tgt="${2}"

	local src_f="${TMPDIR}muggler/$(repo_id)/$(git rev-parse "${src}")"
	local tgt_f="${TMPDIR}muggler/$(repo_id)/$(git rev-parse "${tgt}")"

	mkdir -p "$(dirname ${src_f})"
	mkdir -p "$(dirname ${tgt_f})"

	rev_migrations "${src}" > $src_f
	rev_migrations "${tgt}" > $tgt_f

	diff "${src_f}" "${tgt_f}"
	return 0
}

hook_post_checkout=$(cat <<EOS
if [[ -f "$(muggler_dir)/hold" ]]; then
	echo "Muggler is on hold, skipping migrations. Run muggler continue when ready"
	return 0
fi

$(this_script) sync "\${1}" "\${2}"
EOS)

hook_merge=$(cat <<EOS
if [[ -f "$(muggler_dir)/hold" ]]; then
	echo "Muggler is on hold, skipping migrations. Run muggler continue when ready"
	return 0
fi

$(this_script) sync HEAD@{1} HEAD
EOS)

function install_cmd {
	local file="${1}"
	local cmd="${2}"

	if [[ -f "${file}" ]]; then
		local content="$(cat "${file}")"
	else
		local content=""
	fi

	content="$(echo "${content}" | { fgrep -v "muggler" || true; })"

	echo -n "${content}" > "${file}"
	echo -e "unset GIT_DIR;\n\n${cmd}" > "${file}"

	chmod +x "${file}"
}

function cmd_hold {
	echo "$(git rev-parse HEAD)" > "$(muggler_dir)/hold"
	echo "Muggler is on hold from now on and will not run migrations."
	echo "Use muggler continue to run the migrations from this point and start auto-migration again."
}

function cmd_continue {
	if [[ ! -f "$(muggler_dir)/hold" ]]; then
		echo "Muggler is not on hold, continue has no effect"
	else
		from="$(cat "$(muggler_dir)/hold")"
		echo "Running migrations from last point: ${from}..HEAD"
		rm "$(muggler_dir)/hold"
		cmd_sync "${from}" "HEAD"
	fi
}

function cmd_sync {
	local last_rev_file="$(muggler_dir)/last_rev"

	local last_rev="$(cat "${last_rev_file}" 2> /dev/null)"
	if [[ -z "${last_rev}" ]]; then
		last_rev="$(git rev-list --max-parents=0 --max-count=1 HEAD)"
	fi

	local log="$(muggler_dir)/sync.log"
	cat /dev/null > "${log}"

	if [[ -z "${1}" ]] && [[ -z "${2}" ]]; then
		local src="${last_rev}"
		local tgt="HEAD"
	elif [[ ! -z "${1}" ]] && [[ ! -z "${2}" ]]; then
		local src="$(rev_name ${1})"
		local tgt="$(rev_name ${2})"
	else
		echo "Error: invalid arguments"
		echo ""
		usage
		exit 1
	fi

	if [[ "$(git rev-parse "${src}")" == "$(git rev-parse "${tgt}")" ]]; then
		return 0
	fi

	echo "-> Calculating migration difference for ${src}..${tgt}" | tee "${log}"
	local mdiff="$(rev_mig_diff "${1}" "${2}" | tee "${log}")"

	if [[ ! -z "${mdiff}" ]]; then
		local mdw="$(echo -n "${mdiff}" | egrep "^<" | cut -f 2 -d ' ')"
		local mup="$(echo -n "${mdiff}" | egrep "^>" | cut -f 2 -d ' ')"

		bundle check >> "${log}"
		if [ $? -eq 1 ]; then
			echo "-> Running bundler (this might take a while)" | tee "${log}"
			bundle >> "${log}"
		fi

		echo "-> Loading rails application and running migrations..."
		bundle exec rails runner "$(prefix)/libexec/migrator.rb" "${1}" "${mdw}" "${mup}" "${log}" >> "${log}"
	else
		echo "No migrations to run." | tee "${log}"
	fi

	echo -n "${tgt}" > "${last_rev_file}"
}

function cmd_store_rev {
	echo -n "$(git rev-parse HEAD)" > "$(muggler_dir)/last_rev"
}

function cmd_install {
	mkdir -p "$(muggler_dir)"
	install_cmd "$(repo_dir)/.git/hooks/post-checkout" "${hook_post_checkout}"
	install_cmd "$(repo_dir)/.git/hooks/post-merge" "${hook_merge}"
	echo "Muggler successfully installed. Make sure you add .muggler to .gitignore"
}

if ! repo_dir > /dev/null 2>&1; then
	echo "Not inside a git repository"
	exit 1
fi

case "${1}" in
"install")
	cmd_install
	;;
"sync")
	cmd_sync "${2}" "${3}"
	;;
"hold")
	cmd_hold
	;;
"continue")
	cmd_continue
	;;
"store_rev")
	cmd_store_rev
	;;
*)
	usage
	;;
esac
